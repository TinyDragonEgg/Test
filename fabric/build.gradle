import org.apache.commons.io.FilenameUtils

plugins {
    id 'multiloader-loader'
    id 'fabric-loom'
}

sourceSets {
    configuredTest {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += test.compileClasspath
        runtimeClasspath += test.runtimeClasspath
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    // Framework
    modImplementation "com.mrcrayfish:framework-fabric:${minecraft_version}-${framework_version}"

    // JEI
    // TODO revert back to minecraft property once jei has updated
    modCompileOnly "mezz.jei:jei-1.21.1-common-api:${jei_version}"
    modCompileOnly "mezz.jei:jei-1.21.1-fabric-api:${jei_version}"
    //modRuntimeOnly "mezz.jei:jei-1.21.1-fabric:${jei_version}"

    // ModMenu
    modApi "com.terraformersmc:modmenu:${modmenu_version}"

    // Night Config
    compileOnly "com.electronwill.night-config:core:3.7.1"
    compileOnly "com.electronwill.night-config:toml:3.7.1"
}

fabricApi {
    configureDataGeneration {
        outputDirectory.set(file("src/generated"))
    }
}

loom {
    def aw = file("src/main/resources/${mod_id}.accesswidener")
    if (aw.exists()) {
        accessWidenerPath.set(aw)
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("runs/client")
            setSource(sourceSets.configuredTest)
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("runs/server")
            setSource(sourceSets.configuredTest)
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

tasks.register("signJar") {
    dependsOn remapJar
    onlyIf {
        findProperty('keyStore') || System.getenv("KEYSTORE")
    }
    doLast {
        def unsignedJar = tasks.remapJar.archiveFile.get()
        def name = FilenameUtils.removeExtension(unsignedJar.getAsFile().getName());
        def signedJar  = layout.buildDirectory.file("libs/%s-signed.jar".formatted(name)).get();
        def options = [:]
        options['jar'] = unsignedJar.getAsFile().getAbsolutePath()
        options['signedJar'] = signedJar.getAsFile().getAbsolutePath()
        options['alias'] = findProperty('keyStoreAlias') ?: System.getenv("KEYSTORE_ALIAS")
        options['keyStore'] = findProperty('keyStore') ?: System.getenv("KEYSTORE")
        options['storePass'] = findProperty('keyStorePass') ?: System.getenv("KEYSTORE_PASS")
        options['storetype'] = "jks"
        this.getAnt().invokeMethod("signjar", options);
    }
}

build.dependsOn signJar